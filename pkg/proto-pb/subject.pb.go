// Code generated by protoc-gen-go. DO NOT EDIT.
// source: subject.proto

//
//'package' keyword is used to avoid name collision.
//You canot have different package names in multiple files in same folder unless you are compiling a single proto file.

package proto_pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// 'enum' can be used to predefine values.
type Subject int32

const (
	Subject_PHYSICS   Subject = 0
	Subject_CHEMISTRY Subject = 1
	Subject_MATHS     Subject = 2
)

var Subject_name = map[int32]string{
	0: "PHYSICS",
	1: "CHEMISTRY",
	2: "MATHS",
}

var Subject_value = map[string]int32{
	"PHYSICS":   0,
	"CHEMISTRY": 1,
	"MATHS":     2,
}

func (x Subject) String() string {
	return proto.EnumName(Subject_name, int32(x))
}

func (Subject) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3181af8fcb9beccf, []int{0}
}

//
//'message' keyword is used to define a message which will be in turn used as 'request' or 'response'.
//'Names' for 'message' will be in the standard of 'PascalCase' letters.
//The field numbers '1,2,3...' represents the index of values appearing in the encoded streams.
//It can also be represented in '1,3,2..', '1, 3,4' but not '1,2,2...'.
//
//Field numbers '1-15' take 1 byte to encode, where as field numbers '16-2047' takes 2 bytes.
//So you should reserve the numbers 1 through 15 for very frequently occurring message elements.
type SubjectInfo struct {
	SlNo                 int32    `protobuf:"varint,1,opt,name=sl_no,json=slNo,proto3" json:"sl_no,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Subject              Subject  `protobuf:"varint,3,opt,name=subject,proto3,enum=student.Subject" json:"subject,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubjectInfo) Reset()         { *m = SubjectInfo{} }
func (m *SubjectInfo) String() string { return proto.CompactTextString(m) }
func (*SubjectInfo) ProtoMessage()    {}
func (*SubjectInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_3181af8fcb9beccf, []int{0}
}

func (m *SubjectInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubjectInfo.Unmarshal(m, b)
}
func (m *SubjectInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubjectInfo.Marshal(b, m, deterministic)
}
func (m *SubjectInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubjectInfo.Merge(m, src)
}
func (m *SubjectInfo) XXX_Size() int {
	return xxx_messageInfo_SubjectInfo.Size(m)
}
func (m *SubjectInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SubjectInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SubjectInfo proto.InternalMessageInfo

func (m *SubjectInfo) GetSlNo() int32 {
	if m != nil {
		return m.SlNo
	}
	return 0
}

func (m *SubjectInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SubjectInfo) GetSubject() Subject {
	if m != nil {
		return m.Subject
	}
	return Subject_PHYSICS
}

func init() {
	proto.RegisterEnum("student.Subject", Subject_name, Subject_value)
	proto.RegisterType((*SubjectInfo)(nil), "student.SubjectInfo")
}

func init() {
	proto.RegisterFile("subject.proto", fileDescriptor_3181af8fcb9beccf)
}

var fileDescriptor_3181af8fcb9beccf = []byte{
	// 179 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x2e, 0x4d, 0xca,
	0x4a, 0x4d, 0x2e, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2f, 0x2e, 0x29, 0x4d, 0x49,
	0xcd, 0x2b, 0x51, 0x4a, 0xe2, 0xe2, 0x0e, 0x86, 0xc8, 0x78, 0xe6, 0xa5, 0xe5, 0x0b, 0x09, 0x73,
	0xb1, 0x16, 0xe7, 0xc4, 0xe7, 0xe5, 0x4b, 0x30, 0x2a, 0x30, 0x6a, 0xb0, 0x06, 0xb1, 0x14, 0xe7,
	0xf8, 0xe5, 0x0b, 0x09, 0x71, 0xb1, 0xe4, 0x25, 0xe6, 0xa6, 0x4a, 0x30, 0x29, 0x30, 0x6a, 0x70,
	0x06, 0x81, 0xd9, 0x42, 0x5a, 0x5c, 0xec, 0x50, 0x13, 0x25, 0x98, 0x15, 0x18, 0x35, 0xf8, 0x8c,
	0x04, 0xf4, 0xa0, 0x46, 0xea, 0x41, 0xcd, 0x0b, 0x82, 0x29, 0xd0, 0x32, 0xe0, 0x62, 0x87, 0x8a,
	0x09, 0x71, 0x73, 0xb1, 0x07, 0x78, 0x44, 0x06, 0x7b, 0x3a, 0x07, 0x0b, 0x30, 0x08, 0xf1, 0x72,
	0x71, 0x3a, 0x7b, 0xb8, 0xfa, 0x7a, 0x06, 0x87, 0x04, 0x45, 0x0a, 0x30, 0x0a, 0x71, 0x72, 0xb1,
	0xfa, 0x3a, 0x86, 0x78, 0x04, 0x0b, 0x30, 0x39, 0x71, 0x45, 0x71, 0x80, 0xdd, 0xa9, 0x5b, 0x90,
	0x94, 0xc4, 0x06, 0x66, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x39, 0xaa, 0xb6, 0x66, 0xc2,
	0x00, 0x00, 0x00,
}
