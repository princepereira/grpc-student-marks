// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mark.proto

package proto_pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MarkReq struct {
	SubjectInfo          *SubjectInfo `protobuf:"bytes,1,opt,name=subject_info,json=subjectInfo,proto3" json:"subject_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *MarkReq) Reset()         { *m = MarkReq{} }
func (m *MarkReq) String() string { return proto.CompactTextString(m) }
func (*MarkReq) ProtoMessage()    {}
func (*MarkReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f00c7f10d4b8668, []int{0}
}

func (m *MarkReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarkReq.Unmarshal(m, b)
}
func (m *MarkReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarkReq.Marshal(b, m, deterministic)
}
func (m *MarkReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarkReq.Merge(m, src)
}
func (m *MarkReq) XXX_Size() int {
	return xxx_messageInfo_MarkReq.Size(m)
}
func (m *MarkReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MarkReq.DiscardUnknown(m)
}

var xxx_messageInfo_MarkReq proto.InternalMessageInfo

func (m *MarkReq) GetSubjectInfo() *SubjectInfo {
	if m != nil {
		return m.SubjectInfo
	}
	return nil
}

type MarkResp struct {
	SubjectInfo          *SubjectInfo `protobuf:"bytes,1,opt,name=subject_info,json=subjectInfo,proto3" json:"subject_info,omitempty"`
	Mark                 int32        `protobuf:"varint,2,opt,name=mark,proto3" json:"mark,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *MarkResp) Reset()         { *m = MarkResp{} }
func (m *MarkResp) String() string { return proto.CompactTextString(m) }
func (*MarkResp) ProtoMessage()    {}
func (*MarkResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f00c7f10d4b8668, []int{1}
}

func (m *MarkResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarkResp.Unmarshal(m, b)
}
func (m *MarkResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarkResp.Marshal(b, m, deterministic)
}
func (m *MarkResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarkResp.Merge(m, src)
}
func (m *MarkResp) XXX_Size() int {
	return xxx_messageInfo_MarkResp.Size(m)
}
func (m *MarkResp) XXX_DiscardUnknown() {
	xxx_messageInfo_MarkResp.DiscardUnknown(m)
}

var xxx_messageInfo_MarkResp proto.InternalMessageInfo

func (m *MarkResp) GetSubjectInfo() *SubjectInfo {
	if m != nil {
		return m.SubjectInfo
	}
	return nil
}

func (m *MarkResp) GetMark() int32 {
	if m != nil {
		return m.Mark
	}
	return 0
}

type AllMarksResp struct {
	SlNo                 int32                    `protobuf:"varint,1,opt,name=sl_no,json=slNo,proto3" json:"sl_no,omitempty"`
	Name                 string                   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Marks                []*AllMarksResp_MarkInfo `protobuf:"bytes,3,rep,name=marks,proto3" json:"marks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *AllMarksResp) Reset()         { *m = AllMarksResp{} }
func (m *AllMarksResp) String() string { return proto.CompactTextString(m) }
func (*AllMarksResp) ProtoMessage()    {}
func (*AllMarksResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f00c7f10d4b8668, []int{2}
}

func (m *AllMarksResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllMarksResp.Unmarshal(m, b)
}
func (m *AllMarksResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllMarksResp.Marshal(b, m, deterministic)
}
func (m *AllMarksResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllMarksResp.Merge(m, src)
}
func (m *AllMarksResp) XXX_Size() int {
	return xxx_messageInfo_AllMarksResp.Size(m)
}
func (m *AllMarksResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AllMarksResp.DiscardUnknown(m)
}

var xxx_messageInfo_AllMarksResp proto.InternalMessageInfo

func (m *AllMarksResp) GetSlNo() int32 {
	if m != nil {
		return m.SlNo
	}
	return 0
}

func (m *AllMarksResp) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AllMarksResp) GetMarks() []*AllMarksResp_MarkInfo {
	if m != nil {
		return m.Marks
	}
	return nil
}

type AllMarksResp_MarkInfo struct {
	SubjectName          Subject  `protobuf:"varint,1,opt,name=subject_name,json=subjectName,proto3,enum=student.Subject" json:"subject_name,omitempty"`
	Mark                 int32    `protobuf:"varint,2,opt,name=mark,proto3" json:"mark,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AllMarksResp_MarkInfo) Reset()         { *m = AllMarksResp_MarkInfo{} }
func (m *AllMarksResp_MarkInfo) String() string { return proto.CompactTextString(m) }
func (*AllMarksResp_MarkInfo) ProtoMessage()    {}
func (*AllMarksResp_MarkInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f00c7f10d4b8668, []int{2, 0}
}

func (m *AllMarksResp_MarkInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllMarksResp_MarkInfo.Unmarshal(m, b)
}
func (m *AllMarksResp_MarkInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllMarksResp_MarkInfo.Marshal(b, m, deterministic)
}
func (m *AllMarksResp_MarkInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllMarksResp_MarkInfo.Merge(m, src)
}
func (m *AllMarksResp_MarkInfo) XXX_Size() int {
	return xxx_messageInfo_AllMarksResp_MarkInfo.Size(m)
}
func (m *AllMarksResp_MarkInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AllMarksResp_MarkInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AllMarksResp_MarkInfo proto.InternalMessageInfo

func (m *AllMarksResp_MarkInfo) GetSubjectName() Subject {
	if m != nil {
		return m.SubjectName
	}
	return Subject_PHYSICS
}

func (m *AllMarksResp_MarkInfo) GetMark() int32 {
	if m != nil {
		return m.Mark
	}
	return 0
}

func init() {
	proto.RegisterType((*MarkReq)(nil), "student.MarkReq")
	proto.RegisterType((*MarkResp)(nil), "student.MarkResp")
	proto.RegisterType((*AllMarksResp)(nil), "student.AllMarksResp")
	proto.RegisterType((*AllMarksResp_MarkInfo)(nil), "student.AllMarksResp.MarkInfo")
}

func init() {
	proto.RegisterFile("mark.proto", fileDescriptor_2f00c7f10d4b8668)
}

var fileDescriptor_2f00c7f10d4b8668 = []byte{
	// 284 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0x31, 0x4f, 0xfb, 0x30,
	0x14, 0xc4, 0x95, 0x7f, 0x9b, 0x7f, 0xca, 0x4b, 0xa9, 0xc0, 0x80, 0x14, 0x65, 0x40, 0x51, 0xa6,
	0x2c, 0x78, 0x48, 0x11, 0xcc, 0x74, 0xa9, 0x18, 0xe8, 0xe0, 0x0c, 0x48, 0x2c, 0x55, 0x52, 0x5c,
	0xa9, 0x34, 0x75, 0x42, 0x9e, 0x8b, 0xf8, 0x7c, 0x7c, 0x32, 0xe4, 0xe7, 0xd0, 0xa0, 0x2a, 0x13,
	0xdb, 0xc5, 0xce, 0xfd, 0xee, 0x4e, 0x06, 0xd8, 0xe5, 0xcd, 0x96, 0xd7, 0x4d, 0xa5, 0x2b, 0xe6,
	0xa1, 0xde, 0xbf, 0x4a, 0xa5, 0xc3, 0x53, 0xdc, 0x17, 0x6f, 0x72, 0xa5, 0xed, 0x79, 0x3c, 0x03,
	0xef, 0x29, 0x6f, 0xb6, 0x42, 0xbe, 0xb3, 0x7b, 0x18, 0xb7, 0x77, 0xcb, 0x8d, 0x5a, 0x57, 0x81,
	0x13, 0x39, 0x89, 0x9f, 0x5e, 0xf2, 0xd6, 0xc9, 0x33, 0x7b, 0xf9, 0xa8, 0xd6, 0x95, 0xf0, 0xb1,
	0xfb, 0x88, 0x9f, 0x61, 0x64, 0x19, 0x58, 0xff, 0x19, 0xc2, 0x18, 0x0c, 0x4d, 0xdd, 0xe0, 0x5f,
	0xe4, 0x24, 0xae, 0x20, 0x1d, 0x7f, 0x39, 0x30, 0x7e, 0x28, 0x4b, 0x03, 0x47, 0xa2, 0x5f, 0x80,
	0x8b, 0xe5, 0x52, 0x59, 0xac, 0x2b, 0x86, 0x58, 0x2e, 0xc8, 0xa9, 0xf2, 0x9d, 0x24, 0xe7, 0x89,
	0x20, 0xcd, 0x6e, 0xc1, 0x35, 0x04, 0x0c, 0x06, 0xd1, 0x20, 0xf1, 0xd3, 0xeb, 0x43, 0xfe, 0x6f,
	0x1c, 0x37, 0x8a, 0x9a, 0xd8, 0x9f, 0xc3, 0xcc, 0x0e, 0xa1, 0x3e, 0xd3, 0x6e, 0x08, 0xd1, 0x4d,
	0xe2, 0x24, 0x3d, 0x3b, 0x1e, 0x72, 0x18, 0xb1, 0x30, 0xb1, 0x3d, 0x23, 0xd2, 0x4f, 0x98, 0x64,
	0xd6, 0x93, 0xc9, 0xe6, 0x63, 0xb3, 0x92, 0x8c, 0x83, 0x37, 0x97, 0xda, 0x24, 0xb1, 0x8e, 0xd7,
	0xbe, 0x42, 0x78, 0x7e, 0x74, 0x82, 0x35, 0xbb, 0x03, 0x7f, 0x2e, 0xf5, 0x4f, 0xf3, 0x1e, 0xcf,
	0x55, 0xef, 0xbc, 0x19, 0xbc, 0x8c, 0xe8, 0x91, 0x6f, 0xea, 0xa2, 0xf8, 0x4f, 0x6a, 0xfa, 0x1d,
	0x00, 0x00, 0xff, 0xff, 0xbc, 0x05, 0x48, 0x04, 0x14, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// StudentServiceClient is the client API for StudentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StudentServiceClient interface {
	GetMark(ctx context.Context, in *MarkReq, opts ...grpc.CallOption) (*MarkResp, error)
	GetAllMarks(ctx context.Context, in *MarkReq, opts ...grpc.CallOption) (*AllMarksResp, error)
}

type studentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStudentServiceClient(cc grpc.ClientConnInterface) StudentServiceClient {
	return &studentServiceClient{cc}
}

func (c *studentServiceClient) GetMark(ctx context.Context, in *MarkReq, opts ...grpc.CallOption) (*MarkResp, error) {
	out := new(MarkResp)
	err := c.cc.Invoke(ctx, "/student.StudentService/GetMark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentServiceClient) GetAllMarks(ctx context.Context, in *MarkReq, opts ...grpc.CallOption) (*AllMarksResp, error) {
	out := new(AllMarksResp)
	err := c.cc.Invoke(ctx, "/student.StudentService/GetAllMarks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudentServiceServer is the server API for StudentService service.
type StudentServiceServer interface {
	GetMark(context.Context, *MarkReq) (*MarkResp, error)
	GetAllMarks(context.Context, *MarkReq) (*AllMarksResp, error)
}

// UnimplementedStudentServiceServer can be embedded to have forward compatible implementations.
type UnimplementedStudentServiceServer struct {
}

func (*UnimplementedStudentServiceServer) GetMark(ctx context.Context, req *MarkReq) (*MarkResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMark not implemented")
}
func (*UnimplementedStudentServiceServer) GetAllMarks(ctx context.Context, req *MarkReq) (*AllMarksResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMarks not implemented")
}

func RegisterStudentServiceServer(s *grpc.Server, srv StudentServiceServer) {
	s.RegisterService(&_StudentService_serviceDesc, srv)
}

func _StudentService_GetMark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServiceServer).GetMark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/student.StudentService/GetMark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServiceServer).GetMark(ctx, req.(*MarkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentService_GetAllMarks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServiceServer).GetAllMarks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/student.StudentService/GetAllMarks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServiceServer).GetAllMarks(ctx, req.(*MarkReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _StudentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "student.StudentService",
	HandlerType: (*StudentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMark",
			Handler:    _StudentService_GetMark_Handler,
		},
		{
			MethodName: "GetAllMarks",
			Handler:    _StudentService_GetAllMarks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mark.proto",
}
